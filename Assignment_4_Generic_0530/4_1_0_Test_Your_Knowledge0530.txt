04 Generics
Test your Knowledge

1. Describe the problem generics address.
Generics allow the creation of reusable code classes and methods with type safety 
without the overhead of multiple conversions or boxing/unboxing. 
This addresses the problem of code duplication and the potential for errors 
that can occur when using loosely typed objects.

2. How would you create a list of strings, using the generic List class?
List<string> listOfStrings = new List<string>();
This line of code initializes a new list that is specifically designed to hold strings.

3. How many generic type parameters does the Dictionary class have?
The Dictionary class has two generic type parameters: one for the key and one for the value 
(e.g., Dictionary<TKey, TValue>).

4. True/False. When a generic class has multiple type parameters, they must all match.
False. 
The type parameters of a generic class can be different and unrelated. Each parameter 
represents a separate and potentially different type that the class will use.

5. What method is used to add items to a List object?

The Add method is used to add items to a List object. For example:
List<int> nums = new List<int>();
nums.Add(1); 

6. Name two methods that cause items to be removed from a List.

Two methods that can remove items from a List are:

Remove: Removes the first occurrence of a specific object from the List.
RemoveAt: Removes the element at a specific index.

7. How do you indicate that a class has a generic type parameter?

To indicate that a class has a generic type parameter, you append the type parameter in angle brackets 
after the class name in its declaration. 
For example:
public class ThisClassName<T>{}

8. True/False. Generic classes can only have one generic type parameter.
False. Generic classes can have multiple generic type parameters, separated by commas within the angle brackets 
(e.g., Dictionary<T Key, T Value>).

9. True/False. Generic type constraints limit what can be used for the generic type.
True. Generic type constraints specify what type features (such as inheriting 
from a particular class or implementing a specific interface) 
the generic type must have, thereby limiting the kinds of types that can be used.

10. True/False. Constraints let you use the methods of the thing you are constraining to.
True. By specifying constraints, you can invoke the methods 
and properties of the type you are constraining to, 
ensuring type safety and avoiding errors during compilation.




